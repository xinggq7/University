package xinggq.university.aircloud.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import xinggq.university.aircloud.dao.IDataDao;
import xinggq.university.aircloud.entity.Nangang;
import xinggq.university.aircloud.factory.IFactory;
import xinggq.university.aircloud.util.CreateFactorys;

import java.util.List;
import java.util.Map;

/**
 * Created by xinggq on 17-4-20.
 */

@Service
public class DataService {

    @Autowired
    CreateFactorys createFactorys;


    /**
     * 获取当前数据
     * @param name
     * @return
     */
    public String getCurrentDate(String name){
        Nangang nangang = (Nangang) getIDataDao(name).getCurrentDate();
        if(nangang==null)
            return null;
        return nangang.toString();
    }

    /**
     * 获取历史数据
     * @param name
     * @return
     */
    public String getHistoryData(String name){
        IDataDao iDataDao = getIDataDao(name);
        Map<String,Integer> map = iDataDao.getLastDatanum();
        if(map.get("maxId")==null||map.get("minId")==null)
            return null;
        int num = map.get("maxId")-map.get("minId");
        if(num==0)
            return null;
        List<Object> listdata;
        switch (num/500){
            case 0: {
                //全部输出
                listdata = iDataDao.getHistoryData(map.get("minId"), 1);
                break;
            }
            case 1:{
                if(num%500<250){
                    //只取前500个数
                    listdata = iDataDao.getHistoryData(map.get("minId"),1);
                    //如果是小于750的话采用前500个
                    //否则的话每两个采一个
                    break;
                }
            }
            case 2:{
                    //隔一个取一个
                    listdata = iDataDao.getHistoryData(map.get("minId"),2);
                break;
            }
            default:{
                int step = num/500;
                //步长为step进行取值
                listdata = iDataDao.getHistoryData(map.get("minId"),step);
                break;
            }
        }

        StringBuffer wendu = new StringBuffer();
        StringBuffer keranqitinongdu = new StringBuffer();
        StringBuffer kongqizhiliang = new StringBuffer();

        String wenduStr="";
        String keranqitinongduStr="";
        String kongqizhiliangStr="";

        Nangang nangang;
        for(int i=0;i<(listdata.size()<500?listdata.size():500);i++){
            nangang = (Nangang) listdata.get(i);
            wendu.append(nangang.getWendu()).append(",");
            keranqitinongdu.append((nangang.getKeranqitinongdu())).append(",");
            kongqizhiliang.append(nangang.getKongqizhiliang()).append(",");
        }
        if(wendu.length()>0){

            wenduStr = wendu.toString().substring(0,wendu.toString().length()-1);
            keranqitinongduStr = keranqitinongdu.toString().substring(0,keranqitinongdu.toString().length()-1);
            kongqizhiliangStr = kongqizhiliang.toString().substring(0,kongqizhiliang.toString().length()-1);

        }

        String s = "{"+
                "\"xData\": [0.001567,0.011765,0.022194,0.032316,0.04266,0.063668,0.074477,0.085323,0.09576,0.106078,0.116096,0.137524,0.148342,0.159059,0.170005,0.180716,0.191407,0.212538,0.222819,0.233929,0.244239,0.255301,0.266081,0.287527,0.298115,0.309392,0.320217,0.330928,0.341401,0.361717,0.372173,0.382337,0.39294,0.403072,0.413454,0.434618,0.444845,0.455745,0.465785,0.475987,0.486064,0.507086,0.517517,0.527961,0.538242,0.548414,0.558444,0.578941,0.589212,0.599472,0.60977,0.620178,0.630189,0.650782,0.661001,0.671137,0.681175,0.691235,0.702012,0.722644,0.733166,0.743824,0.754059,0.764109,0.774519,0.795597,0.805721,0.81592,0.826139,0.836369,0.846826,0.86771,0.87803,0.888342,0.898695,0.908723,0.91922,0.939802,0.950378,0.960776,0.971377,0.981843,0.992312,1.013125,1.023302,1.033488,1.043822,1.054203,1.065019,1.086078,1.09635,1.106421,1.117028,1.127541,1.138599,1.159588,1.170167,1.180741,1.190794,1.201112,1.211355,1.233278,1.243477,1.254957,1.265227,1.276378,1.285656,1.297311,1.308367,1.318715,1.329589,1.340834,1.352388,1.375063,1.385369,1.396291,1.408156,1.418989,1.429535,1.451141,1.462205,1.473011,1.483844,1.494311,1.514761,1.525336,1.535858,1.546476,1.557325,1.567512,1.590091,1.600925,1.612303,1.622558,1.633071,1.643555,1.66484,1.675722,1.685986,1.696733,1.706895,1.719102,1.741295,1.752144,1.762688,1.773713,1.784052,1.795705,1.817305,1.827465,1.838408,1.849369,1.860023,1.871438,1.89257,1.90323,1.914398,1.924634,1.934642,1.945212,1.966275,1.976294,1.986422,1.996652,2.008005,2.018309,2.041139,2.051221,2.0613,2.072507,2.08342,2.094075,2.114574,2.125286,2.135765,2.146845,2.157966,2.169391,2.190921,2.200899,2.212709,2.222671,2.232908,2.244001,2.264898,2.275703,2.286885,2.298115,2.310186,2.32059,2.344695,2.354843,2.366387,2.379001,2.390328,2.402215,2.423134,2.433156,2.444912,2.457061,2.468253,2.478978,2.499832,2.513223,2.52561,2.538429,2.548659,2.560809,2.581308,2.592816,2.603963,2.615992,2.626242,2.638223,2.660346,2.671583,2.681938,2.69265,2.70588,2.716296,2.740081,2.75085,2.761319,2.772027,2.782659,2.793531,2.816194,2.828031,2.839243,2.851443,2.863884,2.874359,2.895246,2.906506,2.91761,2.92786,2.938937,2.950218,2.973357,2.98366,2.994639,3.005213,3.01666,3.02761,3.050025,3.061713,3.071828,3.082787,3.093422,3.105289,3.127231,3.138982,3.149755,3.160217,3.171299,3.191571,3.202226,3.213225,3.223987,3.234092,3.244644,3.265939,3.276411,3.286489,3.297156,3.307909,3.319018,3.34064,3.351107,3.361683,3.373136,3.384768,3.395457,3.417722,3.429096,3.439122,3.449679,3.459868,3.469997,3.492679,3.503647,3.514941,3.525858,3.538746,3.550422,3.572255,3.58452,3.595367,3.605736,3.617401,3.628324,3.652523,3.663679,3.67378,3.684605,3.695595,3.705843,3.728706,3.739169,3.750205,3.761258,3.771771,3.781911,3.804724,3.81631,3.826313,3.837847,3.85049,3.860999,3.88262,3.892937,3.903053,3.913656,3.924698,3.935126,3.956362,3.966543,3.976899,3.98752,3.997644,4.008721,4.029852,4.040633,4.051006,4.06126,4.071761,4.083526,4.10749,4.117855,4.128661,4.13934,4.151117,4.1624,4.184736,4.194826,4.205098,4.215261,4.225325,4.236367,4.262012,4.273794,4.285743,4.297226,4.308086,4.318245,4.340246,4.351486,4.363196,4.374465,4.387109,4.398635,4.421101,4.432135,4.444666,4.456226,4.467413,4.477804,4.498505,4.510413,4.522595,4.534044,4.545944,4.558048,4.580379,4.59312,4.605616,4.618065,4.631266,4.644086,4.667943,4.67948,4.691266,4.703019,4.715923,4.725932,4.752312,4.765224,4.777128,4.787361,4.800435,4.823353,4.836044,4.848602,4.860302,4.871112,4.882779,4.904695,4.914823,4.927074,4.938111,4.949586,4.960761,4.982911,4.9942,5.004246,5.016296,5.027215,5.038043,5.058885,5.070303,5.080649,5.093865,5.104424,5.114903,5.134965,5.146346,5.15634,5.168547,5.179066,5.191167,5.214242,5.224914,5.237573,5.249537,5.261586,5.272517,5.296154,5.306348,5.316773,5.327153,5.339961,5.350638,5.376502,5.389277,5.402142,5.412197,5.42399,5.434873,5.458466,5.470907,5.482679,5.493339,5.50574,5.516349,5.538897,5.549552,5.56083,5.571879,5.583764,5.59509,5.619028,5.629925,5.640716,5.650957,5.661787,5.671957,5.693974,5.704919,5.717491,5.731152,5.744728,5.755687,5.778668,5.791951,5.80409,5.815697,5.828482,5.840501,5.864145,5.875704,5.887893,5.900147,5.912517,5.924894,5.948897,5.959155,5.970262,5.981632,5.992996,6.00356,6.027256,6.038776,6.050959,6.061351,6.071864,6.082436,6.104054,6.115602,6.127623,6.139058,6.150639,6.161323,6.183013,6.194359,6.206269,6.218033,6.2281,6.240494,6.262584,6.275326,6.287166,6.298953,6.310644,6.321583,6.345676,6.356738,6.366782,6.377931,6.388519,6.397159],\"datasets\": [{"+
                "\"name\": \"温度\","+
                "\"data\": ["+wenduStr+"],"+
                "\"unit\": \"℃\","+
                "\"type\": \"area\","+
                "\"valueDecimals\": 1"+
                "}, {"+
                "\"name\": \"可燃气体浓度\","+
                "\"data\": ["+keranqitinongduStr+"],"+
                "\"unit\": \"\","+
                "\"type\": \"area\","+
                "\"valueDecimals\": 0"+
                "}, {"+
                "\"name\": \"空气质量\","+
                "\"data\": ["+kongqizhiliangStr+"],"+
                "\"unit\": \"\","+
                "\"type\": \"area\","+
                "\"valueDecimals\": 0"+
                "}]}";
        System.out.println(s);
        return s;
    }

    /**
     *  获取对应的dao层对象
     * @param name 获取的依据
     * @return
     */
    private IDataDao getIDataDao(String name){

        //通过这个参数来获取相应的工厂（反射）实例，然后通过该工厂获取对应的dao层对象
        IFactory iFactory = createFactorys.getInstance(name);
        if(iFactory==null){
            return null;
        }
        return iFactory.getInstance();
    }

//    public static void main(String[] args) {
//        new DataService().getHistoryData("nangang");
//    }
}
